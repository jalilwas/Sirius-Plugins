-- Music+

local ver = 0.1
local guiParent = gethui and gethui() or game:GetService("CoreGui")
local uiObjects = game:GetObjects('rbxassetid://115604975957931')
local mpUi = uiObjects[1]
local Sirius = guiParent:FindFirstChild("Sirius")

if Sirius and Sirius:FindFirstChild("Music") then
	Sirius.Music.Position = UDim2.new(10, 0, 10, 0)
	Sirius.Music.Visible = false
end

if Sirius and Sirius:FindFirstChild("MusicPlus") then
	Sirius.MusicPlus:Destroy()
end

local Pannel = mpUi.Music:Clone()
Pannel.Name = "MusicPlus"
Pannel.Parent = Sirius
Pannel.Size = UDim2.new(0, 0, 0, 0)
Pannel.Visible = false

local musicList = Pannel.Queue.List
local template = musicList.Template
template.Visible = false

local playlistList = Pannel.Playlists.List
local playlistTemplate = playlistList.Template
playlistTemplate.Visible = false

local musicQueue = {}
local currentAudio
local allSongs = {}
local playlists = {}
local scrollingFrames = {}

local function stopCurrentSong()
	if currentAudio then
		currentAudio:Stop()
		currentAudio = nil
	end
end

local function playSong(songId)
	stopCurrentSong()
	currentAudio = Instance.new("Sound")
	currentAudio.Parent = Pannel
	currentAudio.Name = "Audio"
	currentAudio.SoundId = getcustomasset(songId)
	currentAudio:Play()
	Pannel.Playing.Text = songId
	Pannel.Menu.TogglePlaying.ImageRectOffset = Vector2.new(804, 124)

	currentAudio.Ended:Connect(function()
		Pannel.Menu.TogglePlaying.ImageRectOffset = Vector2.new(764, 244)
	end)
end

local function formatTime(seconds)
	return string.format("%02d:%02d", math.floor(seconds / 60), math.floor(seconds % 60))
end

local function setRandomColor(element)
	element.BackgroundColor3 = Color3.new(math.random(), math.random(), math.random())
end

local function loadSongsFromFolder(folder)
	local songs = {}
	for _, file in ipairs(listfiles(folder)) do
		if string.find(file, ".mp3") then
			table.insert(songs, file)
			table.insert(allSongs, file)
		end
	end
	return songs
end

allSongs = loadSongsFromFolder("Sirius/Music")

local function hideAllScrollingFrames()
	for _, frame in pairs(scrollingFrames) do
		frame.Visible = false
	end
end

local allSongsEntry = playlistTemplate:Clone()
allSongsEntry.Visible = true
allSongsEntry.Parent = playlistList
allSongsEntry.Info.Title.Text = "All Songs"
allSongsEntry.Info.Number.Text = tostring(#allSongs)
allSongsEntry.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
allSongsEntry.Icon.Visible = false

for _, v in ipairs(listfiles("Sirius/Music")) do
	if isfolder(v) then
		local newPlaylistEntry = playlistTemplate:Clone()
		newPlaylistEntry.Visible = true
		newPlaylistEntry.Parent = playlistList
		newPlaylistEntry.Info.Title.Text = v:match("[^/\\]+$")
		newPlaylistEntry.Name = v:match("[^/\\]+$")
		setRandomColor(newPlaylistEntry)

		local musicFiles = loadSongsFromFolder(v)
		playlists[v] = musicFiles

		newPlaylistEntry.Info.Number.Text = tostring(#musicFiles)
		
		newPlaylistEntry.Icon.Visible = false
		
		local iconFile = v .. "/Icon.png"
		if iconFile then
			newPlaylistEntry.Icon.Image = iconFile
		else
			newPlaylistEntry.Icon.Visible = false
		end
		
		if newPlaylistEntry.Icon.Image == nil then
			newPlaylistEntry.Icon.Visible = false
		end
		
		if isfile(iconFile) then
			newPlaylistEntry.Icon.Image = getcustomasset(iconFile)
			newPlaylistEntry.Icon.Visible = true
		end

		local playlistFrame = musicList:Clone()
		playlistFrame.Parent = musicList.Parent
		playlistFrame.Visible = false
		scrollingFrames[v] = playlistFrame

		for _, file in ipairs(musicFiles) do
			local newSongEntry = template:Clone()
			newSongEntry.Visible = true
			newSongEntry.Parent = playlistFrame
			newSongEntry.FileName.Text = file:match("[^/\\]+$"):gsub(".mp3", "")

			local sound = Instance.new("Sound")
			sound.SoundId = getcustomasset(file)
			sound.Parent = Pannel
			sound.Loaded:Connect(function()
				newSongEntry.Duration.Text = formatTime(sound.TimeLength)
			end)

			local interactButton = Instance.new("TextButton")
			interactButton.Size = UDim2.new(1, 0, 1, 0)
			interactButton.BackgroundTransparency = 1
			interactButton.Text = ""
			interactButton.Parent = newSongEntry

			interactButton.MouseButton1Click:Connect(function()
				if not musicQueue[file] then
					table.insert(musicQueue, file)
					playSong(file)
				else
					stopCurrentSong()
				end
			end)
			
			
		end

		newPlaylistEntry.Info.Interact.MouseButton1Click:Connect(function()
			hideAllScrollingFrames()
			playlistFrame.Visible = true
		end)
	end
end

allSongsEntry.Info.Interact.MouseButton1Click:Connect(function()
	hideAllScrollingFrames()
	local allSongsFrame = musicList:Clone()
	allSongsFrame.Parent = musicList.Parent
	allSongsFrame.Visible = true

	for _, file in ipairs(allSongs) do
		local newSongEntry = template:Clone()
		newSongEntry.Visible = true
		newSongEntry.Parent = allSongsFrame
		newSongEntry.FileName.Text = file:match("[^/\\]+$"):gsub(".mp3", "")

		local sound = Instance.new("Sound")
		sound.SoundId = getcustomasset(file)
		sound.Parent = Pannel
		sound.Loaded:Connect(function()
			newSongEntry.Duration.Text = formatTime(sound.TimeLength)
		end)

		local interactButton = Instance.new("TextButton")
		interactButton.Size = UDim2.new(1, 0, 1, 0)
		interactButton.BackgroundTransparency = 1
		interactButton.Text = ""
		interactButton.Parent = newSongEntry

		interactButton.MouseButton1Click:Connect(function()
			if not musicQueue[file] then
				table.insert(musicQueue, file)
				playSong(file)
			else
				stopCurrentSong()
			end
		end)
	end
	scrollingFrames["AllSongs"] = allSongsFrame
end)

local UIS = game:GetService("UserInputService")
local dragging, dragInput, dragStart, startPos

Pannel.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = Pannel.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

Pannel.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

UIS.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		Pannel.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

local open = false

local function tweenPanelSize(newSize)
	Pannel.Parent = Sirius
	Pannel:TweenSize(newSize, Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.5, true, function()
		Pannel.Parent = Sirius
	end)
end

local function togglePanel()
	if open then
		tweenPanelSize(UDim2.new(0, 0, 0, 0))
		task.delay(0.5)
		Pannel.Visible = false
	else
		Pannel.Visible = true
		task.wait()
		tweenPanelSize(UDim2.new(0, 550, 0, 379))
	end
	open = not open
end

if Sirius and Sirius.SmartBar and Sirius.SmartBar.Buttons and Sirius.SmartBar.Buttons.Music and Sirius.SmartBar.Buttons.Music.Interact then
	Sirius.SmartBar.Buttons.Music.Interact.MouseButton1Click:Connect(togglePanel)
end

if Pannel and Pannel:FindFirstChild("Close") then
	Pannel.Close.MouseButton1Click:Connect(function()
		if open then
			togglePanel()
		end
	end)
end

local function findSongIndex(songId)
	for i, v in ipairs(musicQueue) do
		if v == songId then
			return i
		end
	end
	return nil
end

if Pannel.Menu.Next then
	Pannel.Menu.Next.MouseButton1Click:Connect(function()
		local currentIndex = findSongIndex(currentAudio.SoundId)
		if currentIndex then
			playSong(musicQueue[(currentIndex % #musicQueue) + 1])
		end
	end)
end

if Pannel.Menu.Previous then
	Pannel.Menu.Previous.MouseButton1Click:Connect(function()
		local currentIndex = findSongIndex(currentAudio.SoundId)
		if currentIndex then
			playSong(musicQueue[(currentIndex - 2) % #musicQueue + 1])
		end
	end)
end

if Pannel.Menu.TogglePlaying then
	Pannel.Menu.TogglePlaying.MouseButton1Click:Connect(function()
		if currentAudio then
			if currentAudio.IsPlaying then
				currentAudio:Pause()
				Pannel.Menu.TogglePlaying.ImageRectOffset = Vector2.new(764, 244)
			else
				currentAudio:Resume()
				Pannel.Menu.TogglePlaying.ImageRectOffset = Vector2.new(804, 124)
			end
		end
	end)
end


-- Notify

local notifications = {}
local tweenService = game:GetService("TweenService")
local gui = game:GetObjects('rbxassetid://14183548964')[1]
gui.Name = "Notifier"
local notificationContainer = gui.Notifications
local gui2 = Instance.new("ScreenGui")
gui2.Name = "SiriusChecker"
gui2.Parent = game.CoreGui
notificationContainer.Parent = gui2

local siriusValues = {
	siriusName = "Sirius",
	releaseType = "Stable",
	siriusFolder = "Sirius",
	settingsFile = "settings.srs",
	interfaceAsset = 14183548964,
	cdn = "https://cdn.sirius.menu/SIRIUS-SCRIPT-CORE-ASSETS/",
	icons = "https://cdn.sirius.menu/SIRIUS-SCRIPT-CORE-ASSETS/Icons/",
	enableExperienceSync = false, -- Games are no longer available due to a lack of whitelisting, they may be made open source at a later date, however they are patched as of now and are useless to the end user. Turning this on may introduce "fake functionality".

	rawTree = "https://raw.githubusercontent.com/SiriusSoftwareLtd/Sirius/Sirius/games/",
	neonModule = "https://raw.githubusercontent.com/shlexware/Sirius/request/library/neon.lua",
	transparencyProperties = {
		UIStroke = {'Transparency'},
		Frame = {'BackgroundTransparency'},
		TextButton = {'BackgroundTransparency', 'TextTransparency'},
		TextLabel = {'BackgroundTransparency', 'TextTransparency'},
		TextBox = {'BackgroundTransparency', 'TextTransparency'},
		ImageLabel = {'BackgroundTransparency', 'ImageTransparency'},
		ImageButton = {'BackgroundTransparency', 'ImageTransparency'},
		ScrollingFrame = {'BackgroundTransparency', 'ScrollBarImageTransparency'}
	},
	buttonPositions = {Character = UDim2.new(0.5, -155, 1, -29), Scripts = UDim2.new(0.5, -122, 1, -29), Playerlist = UDim2.new(0.5, -68, 1, -29)},
	chatSpy = {
		enabled = true,
		visual = {
			Color = Color3.fromRGB(26, 148, 255),
			Font = Enum.Font.SourceSansBold,
			TextSize = 18
		},
	},
	pingProfile = {
		recentPings = {},
		adaptiveBaselinePings = {},
		pingNotificationCooldown = 0,
		maxSamples = 12, -- max num of recent pings stored
		spikeThreshold = 1.75, -- high Ping in comparison to average ping (e.g 100 avg would be high at 150)
		adaptiveBaselineSamples = 30, -- how many samples Sirius takes before deciding on a fixed high ping value
		adaptiveHighPingThreshold = 120 -- default value
	},
	frameProfile = {
		frameNotificationCooldown = 0,
		fpsQueueSize = 10,
		lowFPSThreshold = 20, -- what's low fps!??!?!
		totalFPS = 0,
		fpsQueue = {},
	}
}


local function figureNotifications()
	local notificationsSize = 0

	for i = #notifications, 0, -1 do
		local notification = notifications[i]
		if notification then
			if notificationsSize == 0 then
				notificationsSize = notification.Size.Y.Offset + 2
			else
				notificationsSize += notification.Size.Y.Offset + 5
			end
			local desiredPosition = UDim2.new(0.5, 0, 0, notificationsSize)
			if notification.Position ~= desiredPosition then
				notification:TweenPosition(desiredPosition, "Out", "Quint", 0.8, true)
			end
		end
	end	
end


local function wipeTransparency(ins, target, checkSelf, tween, duration)
	local transparencyProperties = siriusValues.transparencyProperties

	local function applyTransparency(obj)
		local properties = transparencyProperties[obj.className]

		if properties then
			local tweenProperties = {}

			for _, property in ipairs(properties) do
				tweenProperties[property] = target
			end

			for property, transparency in pairs(tweenProperties) do
				if tween then
					tweenService:Create(obj, TweenInfo.new(duration, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {[property] = transparency}):Play()
				else
					obj[property] = transparency
				end

			end
		end
	end

	if checkSelf then
		applyTransparency(ins)
	end

	for _, descendant in ipairs(ins:getDescendants()) do
		applyTransparency(descendant)
	end
end


local function queueNotification(Title, Description, Image)
	task.spawn(function()		
		local newNotification = notificationContainer.Template:Clone()
		newNotification.Parent = notificationContainer
		newNotification.Name = Title or "Unknown Title"
		newNotification.Visible = true

		newNotification.Title.Text = Title or "Unknown Title"
		newNotification.Description.Text = Description or "Unknown Description"
		newNotification.Time.Text = "now"

		-- Prepare for animation
		newNotification.AnchorPoint = Vector2.new(0.5, 1)
		newNotification.Position = UDim2.new(0.5, 0, -1, 0)
		newNotification.Size = UDim2.new(0, 320, 0, 500)
		newNotification.Description.Size = UDim2.new(0, 241, 0, 400)
		wipeTransparency(newNotification, 1, true)

		newNotification.Description.Size = UDim2.new(0, 241, 0, newNotification.Description.TextBounds.Y)
		newNotification.Size = UDim2.new(0, 100, 0, newNotification.Description.TextBounds.Y + 50)

		table.insert(notifications, newNotification)
		figureNotifications()

		local notificationSound = Instance.new("Sound")
		notificationSound.Parent = game.Workspace
		notificationSound.SoundId = "rbxassetid://255881176"
		notificationSound.Name = "notificationSound"
		notificationSound.Volume = 0.65
		notificationSound.PlayOnRemove = true
		notificationSound:Destroy()


		if not tonumber(Image) then
			newNotification.Icon.Image = 'rbxassetid://14317577326'
		else
			newNotification.Icon.Image = 'rbxassetid://'..Image or 0
		end

		newNotification:TweenPosition(UDim2.new(0.5, 0, 0, newNotification.Size.Y.Offset + 2), "Out", "Quint", 0.9, true)
		task.wait(0.1)
		tweenService:Create(newNotification, TweenInfo.new(0.8, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 320, 0, newNotification.Description.TextBounds.Y + 50)}):Play()
		task.wait(0.05)
		tweenService:Create(newNotification, TweenInfo.new(0.8, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.35}):Play()
		tweenService:Create(newNotification.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0.7}):Play()
		task.wait(0.05)
		tweenService:Create(newNotification.Icon, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
		task.wait(0.04)
		tweenService:Create(newNotification.Title, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
		task.wait(0.04)
		tweenService:Create(newNotification.Description, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 0.15}):Play()
		tweenService:Create(newNotification.Time, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 0.5}):Play()

		--neonModule:BindFrame(newNotification.BlurModule, {
		--	Transparency = 0.98,
		--	BrickColor = BrickColor.new("Institutional white")
		--})

		newNotification.Interact.MouseButton1Click:Connect(function()
			local foundNotification = table.find(notifications, newNotification)
			if foundNotification then table.remove(notifications, foundNotification) end

			tweenService:Create(newNotification, TweenInfo.new(0.35, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {Position = UDim2.new(1.5, 0, 0, newNotification.Position.Y.Offset)}):Play()

			task.wait(0.4)
			newNotification:Destroy()
			figureNotifications()
			return
		end)

		local waitTime = (#newNotification.Description.Text*0.1)+2
		if waitTime <= 1 then waitTime = 2.5 elseif waitTime > 10 then waitTime = 10 end

		task.wait(waitTime)

		local foundNotification = table.find(notifications, newNotification)
		if foundNotification then table.remove(notifications, foundNotification) end

		tweenService:Create(newNotification, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {Position = UDim2.new(1.5, 0, 0, newNotification.Position.Y.Offset)}):Play()

		task.wait(1.2)
		--neonModule:UnbindFrame(newNotification.BlurModule)
		newNotification:Destroy()
		figureNotifications()
	end)
end

if game.CoreGui:FindFirstChild("Sirius") then
	print("Found Sirius UI")
else
	queueNotification("Couldn't find Sirius", "Sirius couldn't be located in the Core Gui, make sure you execute Sirius properly before executing the plugin.", 10734910187)
	return
end

queueNotification("Music+ Plugin", "Thanks for using Music+, this is version " .. ver .."!", 10734910187)
